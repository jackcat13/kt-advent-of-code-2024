/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import java.io.File
import kotlin.math.pow
import kotlin.reflect.KFunction2

val operators = arrayOf<KFunction2<Long, Long, Long>>(Math::addExact, Math::multiplyExact, CustomMath::concatenate)

fun main() {
    val file = File("app/src/main/resources/listExo.txt")
    val list = file.readLines().map {
        val split = it.split(":")
        split[0].toLong() to split[1].trim()
    }

    val validEquations = list.filter { (testValue, equation) ->
        val items = equation.split(" ").map { it.toLong() }
        val operatorsNumber = (items.size - 1).toDouble()
        val operationsPossibilities = operators.size.toDouble().pow(operatorsNumber).toInt()
        for (operation in 0..<operationsPossibilities) {
            val based = operation.toBase(operators.size, operatorsNumber.toInt())
            val operatorsOption = based.map { it.toString().toInt() }.map { operators[it] }
            val operatorIter = operatorsOption.iterator()
            val equationResult = items.reduce { acc, i ->
                if (acc > testValue) return@filter false
                operatorIter.next().invoke(acc, i)
            }
            if (equationResult == testValue) return@filter true
        }
        false
    }

    val result = validEquations.map { (testValue, _) -> testValue }.sum()
    println(result)
}

private fun Int.toBase(base: Int, maxSize: Int): String {
    var input = this
    var sum: Long = 0
    var i: Long = 1
    while (input > 0) {
        sum += (input % base) * i
        i *= 10
        input /= base
    }
    return sum.toString().let {
        var result = it
        if (it.length < maxSize) {
            for (unused in it.length..<maxSize)
                result = "0".plus(result)
        }
        result
    }
}

class CustomMath {
    companion object {
        fun concatenate(n1: Long, n2: Long): Long = "$n1$n2".toLong()
    }
}