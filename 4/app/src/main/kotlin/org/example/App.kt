/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import java.io.File

const val XMAS = "XMAS"

fun main() {
    val file = File("src/main/resources/listExo.txt")
    val list = file.readLines().map { 
        it.toCharArray()
    }.toTypedArray()
    
    var count = 0;
    list.forEachIndexed { x, line ->
        var y = 0;
        for (c in line) {
            if (c == 'X') {
                count += searchNextLetter(x, y, list, 1, null)
            }
            y++
        }
    }
    
    println(count)
    
    secondPart(file, list)
}

fun searchNextLetter(x: Int, y: Int, list: Array<CharArray>, letterPosition: Int, direction: Pair<Int, Int>?): Int {
    if (letterPosition >= XMAS.length) return 1;
    var count = 0;
    val letter = XMAS.get(letterPosition)
    direction?.also{ (i,j) ->
        val nextX = x + i
        val nextY = y + j
        val letterToCheck = list.getOrNull(nextX)?.getOrNull(nextY)
        if (letterToCheck == letter) {
            count += searchNextLetter(nextX, nextY, list, letterPosition + 1, (nextX - x) to (nextY - y))
        }
    } ?: run {
        val nextPositions = arrayOf((x-1) to (y-1), (x-1) to y, (x-1) to (y+1), x to (y-1), x to (y+1), (x+1) to (y-1), (x+1) to y, (x+1) to (y+1))
        for ((i,j) in nextPositions) {
            val letterToCheck = list.getOrNull(i)?.getOrNull(j)
            letterToCheck?.also {
                if (it == letter) {
                    count += searchNextLetter(i, j, list, letterPosition + 1, (i - x) to (j - y))
                }
            }
        }
    }
    return count;
}

fun secondPart(file: File, list: Array<CharArray>) {
    var count = 0;
    list.forEachIndexed { x, line ->
        var y = 0;
        for (c in line) {
            if (c == 'A') {
                count += searchPattern(x, y, list)
            }
            y++
        }
    }
    
    println(count)
}

fun searchPattern(x: Int, y: Int, list: Array<CharArray>): Int {
    val upLeft = list.getOrNull(x-1)?.getOrNull(y-1)
    val downLeft = list.getOrNull(x+1)?.getOrNull(y-1)
    val upRight = list.getOrNull(x-1)?.getOrNull(y+1)
    val downRight = list.getOrNull(x+1)?.getOrNull(y+1)
    
    if (upLeft == null || downLeft == null || upRight == null || downRight == null) return 0;
    
    if (upLeft == 'M' && downRight == 'S' && upRight == 'S' && downLeft == 'M') {
        return 1
    } else if (upLeft == 'M' && downRight == 'S' && upRight == 'M' && downLeft == 'S') {
        return 1
    } else if (upLeft == 'S' && downRight == 'M' && upRight == 'M' && downLeft == 'S') {
        return 1
    } else if (upLeft == 'S' && downRight == 'M' && upRight == 'S' && downLeft == 'M') {
        return 1
    }
    
    return 0;
}