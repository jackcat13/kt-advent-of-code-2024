/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import java.io.File
import org.example.isUnsafe

enum class Levels {
    INCREASE, DECREASE
}

enum class Status {
    SAFE, UNSAFE
}

fun main() {
    val file = File("src/main/resources/listExo.txt")
    val list = file.readLines().map { it.split(" ").map { it.toInt() } }
    
    val statuses = list.map{
        return@map isUnsafe(it, false) 
    }
    
    println(statuses)
    val result = statuses.count { it == Status.SAFE }
    println(result)
}

fun isUnsafe(it: List<Int>, retry: Boolean): Status {
    val levels = if (it[0] - it[1] > 0) Levels.INCREASE else Levels.DECREASE
    val iter = it.iterator()
    var previous = iter.next()
    var position = 1
    while (iter.hasNext()) {
        val current = iter.next()
        val currentLevels = if (previous - current > 0) Levels.INCREASE else Levels.DECREASE
        val diff = Math.abs(previous - current)
        if (currentLevels != levels) return mayRetry(it, retry)
        else if (diff > 3 || diff == 0 ) return mayRetry(it, retry)
        previous = current
        position++
    }
    return Status.SAFE
}

fun mayRetry(it: List<Int>, retry: Boolean): Status {
    if (retry) return Status.UNSAFE
    it.forEachIndexed { index, _ ->
        val retryList = it.toMutableList().also { it.removeAt(index) }
        if (isUnsafe(retryList, true) == Status.SAFE) return Status.SAFE
    }
    return Status.UNSAFE
}